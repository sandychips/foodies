name: CI - Test & Build

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_call:

env:
  NODE_VERSION: '18.x'

jobs:
  # Backend tests
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: foodies_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install backend dependencies
        working-directory: ./backend
        run: npm ci

      - name: Run backend linter
        working-directory: ./backend
        run: npm run lint

      - name: Run backend unit tests
        working-directory: ./backend
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/foodies_test
          JWT_SECRET: test-jwt-secret
          REFRESH_TOKEN_SECRET: test-refresh-secret
        run: npm test

      - name: Upload backend coverage
        uses: codecov/codecov-action@v4
        with:
          files: ./backend/coverage/coverage-final.json
          flags: backend
          name: backend-coverage
        continue-on-error: true

  # Frontend tests
  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Run frontend linter
        working-directory: ./frontend
        run: npm run lint
        continue-on-error: true

      - name: Run frontend tests
        working-directory: ./frontend
        run: npx vitest run

      - name: Upload frontend coverage
        uses: codecov/codecov-action@v4
        with:
          files: ./frontend/coverage/coverage-final.json
          flags: frontend
          name: frontend-coverage
        continue-on-error: true

  # Backend build
  backend-build:
    name: Backend Build Check
    runs-on: ubuntu-latest
    needs: backend-test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install backend dependencies
        working-directory: ./backend
        run: npm ci

      - name: Verify backend can start
        working-directory: ./backend
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://localhost:5432/foodies_test
          JWT_SECRET: test-jwt-secret
          REFRESH_TOKEN_SECRET: test-refresh-secret
        run: |
          timeout 10s node server.js || code=$?; if [[ $code -ne 124 && $code -ne 0 ]]; then exit $code; fi
          echo "Backend started successfully"

  # Frontend build
  frontend-build:
    name: Frontend Build
    runs-on: ubuntu-latest
    needs: frontend-test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Build frontend
        working-directory: ./frontend
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist
          retention-days: 7

  # Integration status check
  all-tests-passed:
    name: All Tests Passed
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, backend-build, frontend-build]
    if: always()

    steps:
      - name: Check test results
        run: |
          if [[ "${{ needs.backend-test.result }}" != "success" ]]; then
            echo "Backend tests failed"
            exit 1
          fi
          if [[ "${{ needs.frontend-test.result }}" != "success" ]]; then
            echo "Frontend tests failed"
            exit 1
          fi
          if [[ "${{ needs.backend-build.result }}" != "success" ]]; then
            echo "Backend build failed"
            exit 1
          fi
          if [[ "${{ needs.frontend-build.result }}" != "success" ]]; then
            echo "Frontend build failed"
            exit 1
          fi
          echo "All tests and builds passed successfully!"